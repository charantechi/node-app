name: CI

on:
  push:
    branches:
    - main
  workflow_dispatch:
env:
  IMAGE_NAME: dpnode-stag

jobs:
  build:
    runs-on: ubuntu-latest
    environment: stag
    steps:
    - uses: actions/checkout@v2

    # - name: Login to DockerHub
    #   uses: docker/login-action@v1
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Azure Container Registry Login
      uses: Azure/docker-login@v1
      with:
        # Container registry username
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        # Container registry password
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        # Container registry server url
        login-server: ${{ vars.ACR_URL }}    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ vars.ACR_URL }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}

    # - name: Repository Dispatch
    #   uses: peter-evans/repository-dispatch@v1
    #   with:
    #     token: ${{ secrets.PAT }}
    #     repository: ${{ github.actor }}/argocd-node-app-config
    #     event-type: new-image
    #     client-payload: '{"image": "${{ vars.ACR_URL }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}"}'

    - name: Azure login
      uses: azure/login@v2
      with:
          auth-type: IDENTITY
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
    - name: Get AKS credentials (admin)
      run: |
          az aks get-credentials \
            --resource-group ${{ vars.AKS_RESOURCE_GROUP }} \
            --name ${{ vars.AKS_CLUSTER }} \
            --admin \
            --overwrite-existing

    - name: Set image in manifest (optional)
      run: |
          sed -i "s|<IMAGE>|${{ vars.ACR_URL }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}|g" deployment.yaml

    - name: Deploy to AKS
      run: |
          kubectl apply -f deployment.yaml -n ${{ vars.AKS_NAMESPACE }}
